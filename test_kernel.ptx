//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19856038
// Cuda compilation tools, release 7.5, V7.5.17
// Based on LLVM 3.4svn
//

.version 4.3
.target sm_50
.address_size 64

	// .weak	cudaMalloc
.extern .func  (.param .b32 func_retval0) _Z6mathopRfS_S_
(
	.param .b64 _Z6mathopRfS_S__param_0,
	.param .b64 _Z6mathopRfS_S__param_1,
	.param .b64 _Z6mathopRfS_S__param_2
)
;
.extern .func  (.param .b64 func_retval0) cudaGetParameterBufferV2
(
	.param .b64 cudaGetParameterBufferV2_param_0,
	.param .align 4 .b8 cudaGetParameterBufferV2_param_1[12],
	.param .align 4 .b8 cudaGetParameterBufferV2_param_2[12],
	.param .b32 cudaGetParameterBufferV2_param_3
)
;
.extern .func  (.param .b32 func_retval0) cudaLaunchDeviceV2
(
	.param .b64 cudaLaunchDeviceV2_param_0,
	.param .b64 cudaLaunchDeviceV2_param_1
)
;

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z6kernelPfS_S_S_
.visible .entry _Z6kernelPfS_S_S_(
	.param .u64 _Z6kernelPfS_S_S__param_0,
	.param .u64 _Z6kernelPfS_S_S__param_1,
	.param .u64 _Z6kernelPfS_S_S__param_2,
	.param .u64 _Z6kernelPfS_S_S__param_3
)
{
	.reg .f32 	%f<2>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [_Z6kernelPfS_S_S__param_0];
	ld.param.u64 	%rd2, [_Z6kernelPfS_S_S__param_1];
	ld.param.u64 	%rd3, [_Z6kernelPfS_S_S__param_2];
	ld.param.u64 	%rd4, [_Z6kernelPfS_S_S__param_3];
	cvta.to.global.u64 	%rd5, %rd4;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mad.lo.s32 	%r4, %r3, %r2, %r1;
	mul.wide.s32 	%rd6, %r4, 4;
	add.s64 	%rd7, %rd1, %rd6;
	add.s64 	%rd8, %rd2, %rd6;
	add.s64 	%rd9, %rd3, %rd6;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd8;
	.param .b64 param2;
	st.param.b64	[param2+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z6mathopRfS_S_, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.f32	%f1, [retval0+0];
	
	//{
	}// Callseq End 0
	add.s64 	%rd10, %rd5, %rd6;
	st.global.f32 	[%rd10], %f1;
	ret;
}

	// .globl	_Z7kernel2PfS_S_S_
.visible .entry _Z7kernel2PfS_S_S_(
	.param .u64 _Z7kernel2PfS_S_S__param_0,
	.param .u64 _Z7kernel2PfS_S_S__param_1,
	.param .u64 _Z7kernel2PfS_S_S__param_2,
	.param .u64 _Z7kernel2PfS_S_S__param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd2, [_Z7kernel2PfS_S_S__param_0];
	ld.param.u64 	%rd3, [_Z7kernel2PfS_S_S__param_1];
	ld.param.u64 	%rd4, [_Z7kernel2PfS_S_S__param_2];
	ld.param.u64 	%rd5, [_Z7kernel2PfS_S_S__param_3];
	mov.u64 	%rd6, _Z6kernelPfS_S_S_;
	mov.u32 	%r1, 1;
	mov.u32 	%r2, 0;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .align 4 .b8 param1[12];
	st.param.b32	[param1+0], %r1;
	st.param.b32	[param1+4], %r1;
	st.param.b32	[param1+8], %r1;
	.param .align 4 .b8 param2[12];
	st.param.b32	[param2+0], %r1;
	st.param.b32	[param2+4], %r1;
	st.param.b32	[param2+8], %r1;
	.param .b32 param3;
	st.param.b32	[param3+0], %r2;
	.param .b64 retval0;
	call.uni (retval0), 
	cudaGetParameterBufferV2, 
	(
	param0, 
	param1, 
	param2, 
	param3
	);
	ld.param.b64	%rd1, [retval0+0];
	
	//{
	}// Callseq End 1
	setp.eq.s64	%p1, %rd1, 0;
	@%p1 bra 	BB7_2;

	st.u64 	[%rd1], %rd2;
	st.u64 	[%rd1+8], %rd3;
	st.u64 	[%rd1+16], %rd4;
	st.u64 	[%rd1+24], %rd5;
	mov.u64 	%rd7, 0;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd1;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 retval0;
	call.uni (retval0), 
	cudaLaunchDeviceV2, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r3, [retval0+0];
	
	//{
	}// Callseq End 2

BB7_2:
	ret;
}


